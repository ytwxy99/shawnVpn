// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: stream.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GrpcServeClient is the client API for GrpcServe service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GrpcServeClient interface {
	Tunnel(ctx context.Context, opts ...grpc.CallOption) (GrpcServe_TunnelClient, error)
}

type grpcServeClient struct {
	cc grpc.ClientConnInterface
}

func NewGrpcServeClient(cc grpc.ClientConnInterface) GrpcServeClient {
	return &grpcServeClient{cc}
}

func (c *grpcServeClient) Tunnel(ctx context.Context, opts ...grpc.CallOption) (GrpcServe_TunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &GrpcServe_ServiceDesc.Streams[0], "/proto.GrpcServe/Tunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &grpcServeTunnelClient{stream}
	return x, nil
}

type GrpcServe_TunnelClient interface {
	Send(*PacketData) error
	Recv() (*PacketData, error)
	grpc.ClientStream
}

type grpcServeTunnelClient struct {
	grpc.ClientStream
}

func (x *grpcServeTunnelClient) Send(m *PacketData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *grpcServeTunnelClient) Recv() (*PacketData, error) {
	m := new(PacketData)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServeServer is the server API for GrpcServe service.
// All implementations must embed UnimplementedGrpcServeServer
// for forward compatibility
type GrpcServeServer interface {
	Tunnel(GrpcServe_TunnelServer) error
	mustEmbedUnimplementedGrpcServeServer()
}

// UnimplementedGrpcServeServer must be embedded to have forward compatible implementations.
type UnimplementedGrpcServeServer struct {
}

func (UnimplementedGrpcServeServer) Tunnel(GrpcServe_TunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method Tunnel not implemented")
}
func (UnimplementedGrpcServeServer) mustEmbedUnimplementedGrpcServeServer() {}

// UnsafeGrpcServeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GrpcServeServer will
// result in compilation errors.
type UnsafeGrpcServeServer interface {
	mustEmbedUnimplementedGrpcServeServer()
}

func RegisterGrpcServeServer(s grpc.ServiceRegistrar, srv GrpcServeServer) {
	s.RegisterService(&GrpcServe_ServiceDesc, srv)
}

func _GrpcServe_Tunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GrpcServeServer).Tunnel(&grpcServeTunnelServer{stream})
}

type GrpcServe_TunnelServer interface {
	Send(*PacketData) error
	Recv() (*PacketData, error)
	grpc.ServerStream
}

type grpcServeTunnelServer struct {
	grpc.ServerStream
}

func (x *grpcServeTunnelServer) Send(m *PacketData) error {
	return x.ServerStream.SendMsg(m)
}

func (x *grpcServeTunnelServer) Recv() (*PacketData, error) {
	m := new(PacketData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GrpcServe_ServiceDesc is the grpc.ServiceDesc for GrpcServe service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GrpcServe_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.GrpcServe",
	HandlerType: (*GrpcServeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Tunnel",
			Handler:       _GrpcServe_Tunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "stream.proto",
}
